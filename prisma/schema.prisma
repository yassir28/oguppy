// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles - defines the available roles in the system
enum UserRole {
  USER            // Regular user - view-only access
  ITEM_MANAGER    // Can manage items only
  BRAND_MANAGER   // Can manage brands and categories only
  ADMIN           // Full access to everything
  
}


// level 1 authentication
model User {
  id             String     @id @default(uuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole  @default(USER)
  // OTP Email Verification fields
  verificationToken   String?   // Store the 6-digit OTP
  tokenExpiry         DateTime? // When the OTP expires (10 minutes)

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}



model Item {
  id          String    @id @default(uuid())
  title       String
  description String?
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String    
  sku         String    @unique
  barcode     String?
  quantity    Int
  unit        Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId      String    
  brand       Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId     String 
  warehouse       Warehouse     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId     String    
  sellingPrice  Float
  supplier       Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String  
  reOrderPoint  Int
  location      String?
  imageUrl      String?
  weight        Float?
  dimensions    String?
  taxRate       Float
  notes         String?
  addStockAdjustment AddStockAdjustment[]  // Add this line to create the opposite relation
  transferStockAdjustment TransferStockAdjustment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Category {
  id          String    @id @default(uuid())
  title       String
  description String?
  items Item[]  // Add this line to create the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id String @id @default(uuid())
  title String
  abbreviation String
  items Item[]  // Add this line to create the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Brand {
  id String @id @default(uuid())
  title String
  items Item[]  // Add this line to create the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Warehouse {
  id String @id @default(uuid())
  title String
  location String?
  description String?
  warehouseType String
  stockQty Int @default(0)
  items Item[]  // Add this line to create the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model AddStockAdjustment {
  id String @id @default(uuid())
  referenceNumber String
  addStockQty Int
  notes String?
  receivingWarehouseId String
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
  supplier       Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt


}

model TransferStockAdjustment {
  id String @id @default(uuid())
  referenceNumber String
  transferStockQty Int
  notes String?
  givingWarehouseId String
  receivingWarehouseId String
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id String @id @default(uuid())
  title String
  phone String?
  email String?
  address String?
  contactPerson String?
  supplierCode String @unique
  paymentTerms String?
  taxId String?
  notes String?
  Item     Item[]
  addStockAdjustment    AddStockAdjustment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}